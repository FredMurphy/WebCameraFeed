<?xml version="1.0" encoding="utf-8"?>
<!--Android Camera plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="AndroidCamera init"/>
	</init>
	
	<androidManifestUpdates>
		<addPermission android:name="android.permission.CAMERA"/>
		<addFeature android:name="android.hardware.camera"/>
		<addFeature android:name="android.hardware.camera.front" android:required="false"/>
		<addFeature android:name="android.hardware.camera.autofocus"/>
	</androidManifestUpdates>

	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>

import android.os.Build;
import java.lang.reflect.Method;
import android.widget.Toast;
import android.hardware.Camera;
import android.hardware.Camera.Size;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.PreviewCallback;
import android.graphics.SurfaceTexture;
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import java.util.List; 
import java.io.IOException;
import android.util.Log;
import android.Manifest;
import android.support.v4.app.ActivityCompat;
import android.support.annotation.NonNull;
import android.graphics.PointF;
		</insert>
	</gameActivityImportAdditions>
	
	<gameActivityClassAdditions>
		<insert>
  Object cameraLock = new Object();
  int deviceID = -1;
	int textureID = 0;
	int width, height, targetFps;
	boolean initialized = false;
	SurfaceTexture surfaceTexture;

	Camera camera;
	boolean previewing = false;

	public native boolean nativeGetFrameData(int frameWidth, int frameHeight, byte[] data);


	public boolean isCameraPermissionGranted() {

		if (Build.VERSION.SDK_INT &gt;= 23) {
			if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
					== PackageManager.PERMISSION_GRANTED) {
				android.util.Log.v("Permision", "Camera Permission is granted");
				return true;
			} else {
				android.util.Log.v("Permision", "Camera Permission is revoked");
				ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA}, 1);
				return false;
			}
		} else {
			//permission is automatically granted on sdk &lt; 23 upon installation
			android.util.Log.v("Camera Permision", "Permission is granted");
			return true;
		}
	}


	public void AndroidThunkJava_Toast() {
		try {
			_activity.runOnUiThread(new Runnable() {
				public void run() {
					Toast.makeText(_activity.getApplicationContext(), "cam o yeah!", Toast.LENGTH_SHORT).show();
				}
			});
		} catch (Exception e) {
			Log.debug("Toast failed with exception " + e.getMessage());
		}
	}

	public void AndroidThunkJava_setDeviceID(int _deviceId) {
		deviceID = _deviceId;
	}

	public boolean AndroidThunkJava_startCamera(int w, int h, int _targetFps, int _texID) {
    
		if (!isCameraPermissionGranted()) {
			textureID = _texID;
			width = w;
			height = h;
			targetFps = _targetFps;
			return false;
		}

		textureID = _texID;

		synchronized(cameraLock) {
		  surfaceTexture = new SurfaceTexture(_texID);
		  surfaceTexture.setDefaultBufferSize(w, h);

		  if (deviceID == -1)
			  deviceID = AndroidThunkJava_getCameraFacing(0);

		  try {
			  if (Build.VERSION.SDK_INT &gt;= 9) {
				  camera = Camera.open(deviceID);
			  } else {
				  camera = Camera.open();
			  }
		  } catch (Exception e) {
			  android.util.Log.e("AndroidCamera", "Error trying to open specific camera, trying default", e);
			  camera = Camera.open();
		  }


		  Parameters cameraParam = camera.getParameters();
		  float smallestDist = 99999999.0f;
          int bestW = 0, bestH = 0;
		  

		  android.util.Log.i("AndroidCamera", "Grabber supported sizes");
		  for (Size s : cameraParam.getSupportedPreviewSizes()) {
			  android.util.Log.i("AndroidCamera", s.width + " " + s.height);
		  }

		   for (Size s : cameraParam.getSupportedPreviewSizes()) {
		  	  
		  		if( s.width == w &amp;&amp; s.height == h ){
                    bestW = w;
                    bestH = h;
                    break;
                }
                float dist = PointF.length(w - s.width, h - s.height);
                if( dist &lt; smallestDist ){
                    smallestDist = dist;
                    bestW = s.width;
                    bestH = s.height;
                }
          }

          if ( bestW != 0 &amp;&amp; bestH != 0 ){
          	 if( bestW != w || bestH != h ){
          	     android.util.Log.w("AndroidCamera", "requested width and height ("  + Integer.toString(w) + "," + Integer.toString(h) + ")  aren't supported. Setting capture size to closest match: " + Integer.toString(bestW) + "," + Integer.toString(bestH) + ")");  
          	     w = bestW;
          	     h = bestH;
          	 }

          }

		  boolean nvSupported = false;

		  android.util.Log.i("AndroidCamera", "Grabber supported formats");
		  for (Integer i : cameraParam.getSupportedPreviewFormats()) {
			  android.util.Log.i("AndroidCamera", i.toString());
			  if ( i == ImageFormat.NV21) nvSupported = true;
		  }

		  if  ( !nvSupported) {
		       android.util.Log.i("AndroidCamera", "NV21 is not supported by this device");
		       camera = null;
		       return false;
		  }

		  android.util.Log.i("AndroidCamera", "Grabber supported fps");
		  for (Integer i : cameraParam.getSupportedPreviewFrameRates()) {
			  android.util.Log.i("AndroidCamera", i.toString());
		  }

		  android.util.Log.i("AndroidCamera", "Grabber default format: " + cameraParam.getPreviewFormat());
		  android.util.Log.i("AndroidCamera", "Grabber default preview size: " + cameraParam.getPreviewSize().width + "," + cameraParam.getPreviewSize().height);

		  cameraParam.setPreviewFormat(ImageFormat.NV21);
		  //cameraParam.setPictureSize(w, h);
		  cameraParam.setPreviewSize(w, h);

		  try {
			  Method setRecordingHint = cameraParam.getClass().getMethod("setRecordingHint", boolean.class);
			  setRecordingHint.invoke(cameraParam, true);
		  } catch (Exception e) {
			  android.util.Log.i("AndroidCamera", "couldn't set recording hint");
		  }

		  camera.setParameters(cameraParam);

		  cameraParam = camera.getParameters();
		  width = cameraParam.getPreviewSize().width;
		  height = cameraParam.getPreviewSize().height;
		  if (width != w || height != h)
			  android.util.Log.w("AndroidCamera", "camera size different than asked for, resizing (this can slow the app) (" + Integer.toString(width) + "," + Integer.toString(height) + "), (" + Integer.toString(w) + "," + Integer.toString(h) + ")");

		  targetFps = _targetFps;

		  // If target fps is not defined, then take the maximum fps
		  if (targetFps == -1) {
			  for (Integer i : cameraParam.getSupportedPreviewFrameRates()) {
				  if (targetFps &lt; i) {
					  targetFps = i;
				  }
			  }
		  }

		  android.util.Log.i("AndroidCamera", "Started preview callback width size: " + Integer.toString(width) + "," + Integer.toString(height));

		  camera.setPreviewCallback(new PreviewCallback() {
			  @Override
			  public void onPreviewFrame(byte[] data, Camera camera) {
          if ( !initialized ) return;
		      synchronized(cameraLock) {
				      if (camera != null) {
					      try {
						      int Height = camera.getParameters().getPreviewSize().height;
						      int Width = camera.getParameters().getPreviewSize().width;
						      nativeGetFrameData(Width, Height, data);
					      } catch (Exception ex) {
		                android.util.Log.i("AndroidCamera", "Error getting the parameters");
					      }
				      }
          }
			  }
		  });

		  if (surfaceTexture != null) {
			  try {
				  camera.setPreviewTexture(surfaceTexture);
			  } catch (IOException t) {
				  android.util.Log.e("AndroidCamera", "Cannot set preview texture target!", t);
			  }
			  previewing = true;
			  camera.startPreview();
		  }

		  initialized = true;
		  return true;
    }
	}

	public void AndroidThunkJava_stopCamera() {
		initialized = false;
		synchronized(cameraLock) {
		    if (camera != null) {
			    camera.setPreviewCallback(null);
			    camera.stopPreview();
			    try {
				    camera.setPreviewTexture(null);
			    } catch (Exception ex) {
			    }

			    surfaceTexture.release();
			    surfaceTexture = null;

			    camera.release();
			    camera = null;
		    }
    }
	}

	public int AndroidThunkJava_getCameraFacing(int facing) {
		if (Build.VERSION.SDK_INT &lt; 9) {
			return 0;
		}

		int numCameras = Camera.getNumberOfCameras();
		Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
		for (int i = 0; i &lt; numCameras; i++) {
			Camera.getCameraInfo(i, cameraInfo);
			int _facing = cameraInfo.facing;
			if (_facing == facing) {
				return i;
			}
		}
		return -1;
	}

	public int AndroidThunkJava_getNumCameras() {
		if (Build.VERSION.SDK_INT &lt; 9) {
			return 1;
		}

		return Camera.getNumberOfCameras();
	}

	public int AndroidThunkJava_getFacingOfCamera(int _deviceID) {
		if (android.os.Build.VERSION.SDK_INT &lt; 9) {
			return 0;
		}

		if (_deviceID == -1) _deviceID = deviceID;

		Camera.CameraInfo info = new Camera.CameraInfo();
		Camera.getCameraInfo(_deviceID, info);
		return info.facing;
	}

	public int AndroidThunkJava_getWidth() {
		return width;
	}

	public int AndroidThunkJava_getHeight() {
		return height;
	}
		</insert>
	</gameActivityClassAdditions>
    
    <gameActivityOnRequestPermissionsResultAdditions>
        <insert>
        for (int i = 0; i &lt; permissions.length; i++) {
            String p = permissions[i];
            if (p.equals(Manifest.permission.CAMERA)) {
                AndroidThunkJava_stopCamera();
                AndroidThunkJava_startCamera(width, height, targetFps, textureID);
                break;
            }
        }
        </insert>
    </gameActivityOnRequestPermissionsResultAdditions>

	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
		</insert>
	</gameActivityOnCreateAdditions>


</root>
